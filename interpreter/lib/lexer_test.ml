let%test "should return next token" =
  let lexer = Lexer.make "=+(){},;" in
  let lexer, maybeAssign = Lexer.nextToken lexer in
  let lexer, maybePlus = Lexer.nextToken lexer in
  let lexer, maybeLeftParen = Lexer.nextToken lexer in
  let lexer, maybeRightParen = Lexer.nextToken lexer in
  let lexer, maybeLeftBrace = Lexer.nextToken lexer in
  let lexer, maybeRightBrace = Lexer.nextToken lexer in
  let lexer, maybeComma = Lexer.nextToken lexer in
  let lexer, maybeSemicolon = Lexer.nextToken lexer in
  let _, maybeEOF = Lexer.nextToken lexer in
  maybeAssign = Assign &&
  maybePlus = Plus &&
  maybeLeftParen = LeftParen &&
  maybeRightParen = RightParen &&
  maybeLeftBrace = LeftBrace &&
  maybeRightBrace = RightBrace &&
  maybeComma = Comma &&
  maybeSemicolon = Semicolon &&
  maybeEOF = EOF

let%test "should tokenize assignments" =
  let lexer = Lexer.make "let five = 5;" in
  let lexer, maybeLet = Lexer.nextToken lexer in
  let lexer, maybeIdent = Lexer.nextToken lexer in
  let lexer, maybeAssign = Lexer.nextToken lexer in
  let lexer, maybeInt = Lexer.nextToken lexer in
  let _, maybeSemicolon = Lexer.nextToken lexer in
  maybeLet = Let &&
  maybeIdent = Ident "five" &&
  maybeAssign = Assign &&
  maybeInt = Int 5 &&
  maybeSemicolon = Semicolon

let%test "should tokenize negations" =
  let lexer = Lexer.make "!a" in
  let lexer, maybeNot = Lexer.nextToken lexer in
  let _, maybeIdent = Lexer.nextToken lexer in
  maybeNot = Not &&
  maybeIdent = Ident "a"

let%test "should tokenize comparision" =
  let lexer = Lexer.make "a > b < c" in
  let lexer, maybeA = Lexer.nextToken lexer in
  let lexer, maybeGreater = Lexer.nextToken lexer in
  let lexer, maybeB = Lexer.nextToken lexer in
  let lexer, maybeLess = Lexer.nextToken lexer in
  let _, maybeC = Lexer.nextToken lexer in
  maybeA = Token.Ident "a" &&
  maybeGreater = Token.GreaterThan &&
  maybeB = Token.Ident "b" &&
  maybeLess = Token.LessThan &&
  maybeC = Token.Ident "c"

let%test "should tokenize arithmetic" =
  let lexer = Lexer.make "1 + 2 - 3 * 4 / 5" in
  let lexer, maybeOne = Lexer.nextToken lexer in
  let lexer, maybePlus = Lexer.nextToken lexer in
  let lexer, maybeTwo = Lexer.nextToken lexer in
  let lexer, maybeMinus = Lexer.nextToken lexer in
  let lexer, maybeThree = Lexer.nextToken lexer in
  let lexer, maybeMult = Lexer.nextToken lexer in
  let lexer, maybeFour = Lexer.nextToken lexer in
  let lexer, maybeDiv = Lexer.nextToken lexer in
  let _, maybeFive = Lexer.nextToken lexer in
  maybeOne = Int 1 &&
  maybePlus = Plus &&
  maybeTwo = Int 2 &&
  maybeMinus = Minus &&
  maybeThree = Int 3 &&
  maybeMult = Multiplication &&
  maybeFour = Int 4 &&
  maybeDiv = Division &&
  maybeFive = Int 5

let%test "should tokenize equality" =
  let lexer = Lexer.make "a != b; b == c" in
  let lexer, maybeA = Lexer.nextToken lexer in
  let lexer, maybeNotEqual = Lexer.nextToken lexer in
  let lexer, _ = Lexer.nextToken lexer in
  let lexer, maybeSemicolon = Lexer.nextToken lexer in
  let lexer, maybeB = Lexer.nextToken lexer in
  let lexer, maybeEqual = Lexer.nextToken lexer in
  let _, maybeC = Lexer.nextToken lexer in
  maybeA = Ident "a" &&
  maybeNotEqual = NotEqual &&
  maybeB = Ident "b" &&
  maybeSemicolon = Semicolon &&
  maybeEqual = Equal &&
  maybeC = Ident "c"

let%test "should tokenize if statement" =
  let lexer = Lexer.make "if (a > b) { a } else { b }" in
  let lexer, maybeIf = Lexer.nextToken lexer in
  let lexer, maybeLP = Lexer.nextToken lexer in
  let lexer, maybeA = Lexer.nextToken lexer in
  let lexer, maybeGT = Lexer.nextToken lexer in
  let lexer, maybeB = Lexer.nextToken lexer in
  let lexer, maybeRP = Lexer.nextToken lexer in
  let lexer, maybeLB = Lexer.nextToken lexer in
  let lexer, _ = Lexer.nextToken lexer in
  let lexer, maybeRB = Lexer.nextToken lexer in
  let _, maybeElse = Lexer.nextToken lexer in
  maybeIf = If &&
  maybeLP = LeftParen &&
  maybeA = Ident "a" &&
  maybeGT = GreaterThan &&
  maybeB = Ident "b" &&
  maybeRP = RightParen &&
  maybeLB = LeftBrace &&
  maybeRB = RightBrace &&
  maybeElse = Else
  
let%test "should tokenize return statements" =
  let lexer = Lexer.make "return a;" in
  let lexer, maybeReturn = Lexer.nextToken lexer in
  let lexer, maybeA = Lexer.nextToken lexer in
  let _, maybeSemicolon = Lexer.nextToken lexer in
  maybeReturn = Return &&
  maybeA = Ident "a" &&
  maybeSemicolon = Semicolon

let%test "should tokenize boolean literals" =
  let lexer = Lexer.make "true; false" in
  let lexer, maybeTrue = Lexer.nextToken lexer in
  let lexer, _ = Lexer.nextToken lexer in
  let _, maybeFalse = Lexer.nextToken lexer in
  maybeTrue = True &&
  maybeFalse = False

let%test "should tokenize string literals" =
  let lexer = Lexer.make {|"hello world!"|} in
  let _, maybeString = Lexer.nextToken lexer in
  maybeString = String "hello world!"

let%test "should tokenize arrays" =
  let lexer = Lexer.make "[1, 2]" in
  let lexer, maybeLeft = Lexer.nextToken lexer in
  let lexer, maybeFirstElt = Lexer.nextToken lexer in
  let lexer, maybeComma = Lexer.nextToken lexer in
  let lexer, maybeSecondElt = Lexer.nextToken lexer in
  let _, maybeRight = Lexer.nextToken lexer in
  maybeLeft = LeftBracket &&
  maybeFirstElt = Int 1 &&
  maybeComma = Comma &&
  maybeSecondElt = Int 2 &&
  maybeRight = RightBracket

let%test "should tokenize hash literals" =
  let lexer = Lexer.make {|{ "age": 5 }|} in
  let lexer, left = Lexer.nextToken lexer in
  let lexer, key = Lexer.nextToken lexer in
  let lexer, colon = Lexer.nextToken lexer in
  let lexer, value = Lexer.nextToken lexer in
  let _, right = Lexer.nextToken lexer in
  left = LeftBrace &&
  key = String "age" &&
  colon = Colon &&
  value = Int 5 &&
  right = RightBrace
