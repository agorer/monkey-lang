let%test "should return next token" =
  let lexer = Lexer.make "=+(){},;" in
  let lexer, maybeAssign = Lexer.nextToken lexer in
  let lexer, maybePlus = Lexer.nextToken lexer in
  let lexer, maybeLeftParen = Lexer.nextToken lexer in
  let lexer, maybeRightParen = Lexer.nextToken lexer in
  let lexer, maybeLeftBrace = Lexer.nextToken lexer in
  let lexer, maybeRightBrace = Lexer.nextToken lexer in
  let lexer, maybeComma = Lexer.nextToken lexer in
  let lexer, maybeSemicolon = Lexer.nextToken lexer in
  let _, maybeEOF = Lexer.nextToken lexer in
  maybeAssign = Token.Assign &&
  maybePlus = Token.Plus &&
  maybeLeftParen = Token.LeftParen &&
  maybeRightParen = Token.RightParen &&
  maybeLeftBrace = Token.LeftBrace &&
  maybeRightBrace = Token.RightBrace &&
  maybeComma = Token.Comma &&
  maybeSemicolon = Token.Semicolon &&
  maybeEOF = Token.EOF

let%test "should tokenize assignments" =
  let lexer = Lexer.make "let five = 5;" in
  let lexer, maybeLet = Lexer.nextToken lexer in
  let lexer, maybeIdent = Lexer.nextToken lexer in
  let lexer, maybeAssign = Lexer.nextToken lexer in
  let lexer, maybeInt = Lexer.nextToken lexer in
  let _, maybeSemicolon = Lexer.nextToken lexer in
  maybeLet = Token.Let &&
  maybeIdent = Token.Ident "five" &&
  maybeAssign = Token.Assign &&
  maybeInt = Token.Int 5 &&
  maybeSemicolon = Token.Semicolon

let%test "should tokenize negations" =
  let lexer = Lexer.make "!a" in
  let lexer, maybeNot = Lexer.nextToken lexer in
  let _, maybeIdent = Lexer.nextToken lexer in
  maybeNot = Token.Not &&
  maybeIdent = Token.Ident "a"

let%test "should tokenize comparision" =
  let lexer = Lexer.make "a > b < c" in
  let lexer, maybeA = Lexer.nextToken lexer in
  let lexer, maybeGreater = Lexer.nextToken lexer in
  let lexer, maybeB = Lexer.nextToken lexer in
  let lexer, maybeLess = Lexer.nextToken lexer in
  let _, maybeC = Lexer.nextToken lexer in
  maybeA = Token.Ident "a" &&
  maybeGreater = Token.GreaterThan &&
  maybeB = Token.Ident "b" &&
  maybeLess = Token.LessThan &&
  maybeC = Token.Ident "c"

let%test "should tokenize arithmetic" =
  let lexer = Lexer.make "1 + 2 - 3 * 4 / 5" in
  let lexer, maybeOne = Lexer.nextToken lexer in
  let lexer, maybePlus = Lexer.nextToken lexer in
  let lexer, maybeTwo = Lexer.nextToken lexer in
  let lexer, maybeMinus = Lexer.nextToken lexer in
  let lexer, maybeThree = Lexer.nextToken lexer in
  let lexer, maybeMult = Lexer.nextToken lexer in
  let lexer, maybeFour = Lexer.nextToken lexer in
  let lexer, maybeDiv = Lexer.nextToken lexer in
  let _, maybeFive = Lexer.nextToken lexer in
  maybeOne = Token.Int 1 &&
  maybePlus = Token.Plus &&
  maybeTwo = Token.Int 2 &&
  maybeMinus = Token.Minus &&
  maybeThree = Token.Int 3 &&
  maybeMult = Token.Multiplication &&
  maybeFour = Token.Int 4 &&
  maybeDiv = Token.Division &&
  maybeFive = Token.Int 5

let%test "should tokenize equality" =
  let lexer = Lexer.make "a != b; b == c" in
  let lexer, maybeA = Lexer.nextToken lexer in
  let lexer, maybeNotEqual = Lexer.nextToken lexer in
  let lexer, _ = Lexer.nextToken lexer in
  let lexer, maybeSemicolon = Lexer.nextToken lexer in
  let lexer, maybeB = Lexer.nextToken lexer in
  let lexer, maybeEqual = Lexer.nextToken lexer in
  let _, maybeC = Lexer.nextToken lexer in
  maybeA = Token.Ident "a" &&
  maybeNotEqual = Token.NotEqual &&
  maybeB = Token.Ident "b" &&
  maybeSemicolon = Token.Semicolon &&
  maybeEqual = Token.Equal &&
  maybeC = Token.Ident "c"

let%test "should tokenize if statement" =
  let lexer = Lexer.make "if (a > b) { a } else { b }" in
  let lexer, maybeIf = Lexer.nextToken lexer in
  let lexer, maybeLP = Lexer.nextToken lexer in
  let lexer, maybeA = Lexer.nextToken lexer in
  let lexer, maybeGT = Lexer.nextToken lexer in
  let lexer, maybeB = Lexer.nextToken lexer in
  let lexer, maybeRP = Lexer.nextToken lexer in
  let lexer, maybeLB = Lexer.nextToken lexer in
  let lexer, _ = Lexer.nextToken lexer in
  let lexer, maybeRB = Lexer.nextToken lexer in
  let _, maybeElse = Lexer.nextToken lexer in
  maybeIf = Token.If &&
  maybeLP = Token.LeftParen &&
  maybeA = Token.Ident "a" &&
  maybeGT = Token.GreaterThan &&
  maybeB = Token.Ident "b" &&
  maybeRP = Token.RightParen &&
  maybeLB = Token.LeftBrace &&
  maybeRB = Token.RightBrace &&
  maybeElse = Token.Else
  
let%test "should tokenize return statements" =
  let lexer = Lexer.make "return a;" in
  let lexer, maybeReturn = Lexer.nextToken lexer in
  let lexer, maybeA = Lexer.nextToken lexer in
  let _, maybeSemicolon = Lexer.nextToken lexer in
  maybeReturn = Token.Return &&
  maybeA = Token.Ident "a" &&
  maybeSemicolon = Token.Semicolon

let%test "should tokenize boolean literals" =
  let lexer = Lexer.make "true; false" in
  let lexer, maybeTrue = Lexer.nextToken lexer in
  let lexer, _ = Lexer.nextToken lexer in
  let _, maybeFalse = Lexer.nextToken lexer in
  maybeTrue = Token.True &&
  maybeFalse = Token.False

let%test "should tokenize string literals" =
  let lexer = Lexer.make {|"hello world!"|} in
  let _, maybeString = Lexer.nextToken lexer in
  maybeString = Token.String "hello world!"
